        {displayedTasks.map((task: Task) => {
          console.log(task);
          return editingId === task.id ? (
            <Box component="form" onSubmit={handleEditFormSubmit} key={task.id} className={styles.formBox}>
              <TextField name="name" label="Edit Task name" value={editedTask?.name || ""} onChange={handleEditFormChange} fullWidth margin="normal" required />
              <FormControlLabel control={<Checkbox name="is_completed" checked={editedTask?.is_completed || false} onChange={handleEditFormChange} />} label="Completed" />

              <FormControl fullWidth margin="normal">
                <InputLabel id="edit-project-select-label">Associated Project (Optional)</InputLabel>
                <Select labelId="edit-project-select-label" id="edit-project-select" value={editedTask?.projectId || ""} label="Associated Project (Optional)" onChange={(e) => handleEditProjectChange(e.target.value === "" ? undefined : (e.target.value as string))}>
                  <MenuItem value="">
                    <em>None</em>
                  </MenuItem>
                  {projects.map((project) => (
                    <MenuItem key={project.id} value={project.id}>
                      {project.name}
                    </MenuItem>
                  ))}
                </Select>
              </FormControl>

              <Autocomplete
                multiple
                id="edit-tags-autocomplete"
                options={availableTags}
                value={editedTaskTags}
                onChange={(_event, newValue) => setEditedTaskTags(newValue)}
                freeSolo
                renderInput={(params) => <TextField {...params} label="Edit Tags" placeholder="Add a Tag" margin="normal" fullWidth />}
                sx={{ mt: 2, mb: 1 }}
              />
              <Box className={styles.formButtonsBox}>
                <Button type="submit" variant="contained" color="primary" disabled={loading}>
                  {loading ? <CircularProgress size={24} /> : "Update"}
                </Button>
                <Button
                  type="button"
                  variant="outlined"
                  onClick={() => {
                    setEditingId(null);
                    setEditedTask(null);
                  }}
                  disabled={loading}
                >
                  Cancel
                </Button>
              </Box>
            </Box>
          ) : (
            <CardComponent key={task.id} item={task} onEdit={handleEdit} onDelete={handleDelete} onToggleComplete={handleToggleComplete} onDecision={handleDecision} decision={taskDecisions[task.id]} />
          );
        })} 